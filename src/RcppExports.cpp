// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "fastadi_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// makeCitationEstimate
Rcpp::XPtr<CitationEstimate> makeCitationEstimate(SparseMatrix A, NumericMatrix U, NumericVector d, NumericMatrix V);
RcppExport SEXP _fastadi_makeCitationEstimate(SEXP ASEXP, SEXP USEXP, SEXP dSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SparseMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(makeCitationEstimate(A, U, d, V));
    return rcpp_result_gen;
END_RCPP
}
// left
NumericVector left(NumericVector x, Rcpp::XPtr<CitationEstimate> A);
RcppExport SEXP _fastadi_left(SEXP xSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<CitationEstimate> >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(left(x, A));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fastadi_makeCitationEstimate", (DL_FUNC) &_fastadi_makeCitationEstimate, 4},
    {"_fastadi_left", (DL_FUNC) &_fastadi_left, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_fastadi(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
