// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// initial_guess
VectorXd initial_guess(const MatrixXd& M, const int r);
RcppExport SEXP _fastadi_initial_guess(SEXP MSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(initial_guess(M, r));
    return rcpp_result_gen;
END_RCPP
}
// timesTwo
NumericVector timesTwo(NumericVector x);
RcppExport SEXP _fastadi_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(x));
    return rcpp_result_gen;
END_RCPP
}
// lt_multiply
VectorXd lt_multiply(const MatrixXd& U, const MatrixXd& V, const VectorXd& x);
RcppExport SEXP _fastadi_lt_multiply(SEXP USEXP, SEXP VSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type U(USEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(lt_multiply(U, V, x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_hello_world
Eigen::MatrixXd rcppeigen_hello_world();
RcppExport SEXP _fastadi_rcppeigen_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcppeigen_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_outerproduct
Eigen::MatrixXd rcppeigen_outerproduct(const Eigen::VectorXd& x);
RcppExport SEXP _fastadi_rcppeigen_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_innerproduct
double rcppeigen_innerproduct(const Eigen::VectorXd& x);
RcppExport SEXP _fastadi_rcppeigen_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_bothproducts
Rcpp::List rcppeigen_bothproducts(const Eigen::VectorXd& x);
RcppExport SEXP _fastadi_rcppeigen_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fastadi_initial_guess", (DL_FUNC) &_fastadi_initial_guess, 2},
    {"_fastadi_timesTwo", (DL_FUNC) &_fastadi_timesTwo, 1},
    {"_fastadi_lt_multiply", (DL_FUNC) &_fastadi_lt_multiply, 3},
    {"_fastadi_rcppeigen_hello_world", (DL_FUNC) &_fastadi_rcppeigen_hello_world, 0},
    {"_fastadi_rcppeigen_outerproduct", (DL_FUNC) &_fastadi_rcppeigen_outerproduct, 1},
    {"_fastadi_rcppeigen_innerproduct", (DL_FUNC) &_fastadi_rcppeigen_innerproduct, 1},
    {"_fastadi_rcppeigen_bothproducts", (DL_FUNC) &_fastadi_rcppeigen_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_fastadi(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
